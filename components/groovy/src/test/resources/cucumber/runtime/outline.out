Feature: Cukes

  Scenario Outline: cooking                     # cucumber/runtime/outline.feature:3
    Given the <container> contains <ingredient> # cucumber/runtime/outline.feature:4
    When I add <liquid>                         # cucumber/runtime/outline.feature:5
    And serve it to my guests                   # cucumber/runtime/outline.feature:6
    Then they'll be eating "<dish>"             # cucumber/runtime/outline.feature:7

    Examples: 
      | container | ingredient | liquid    | dish         |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | bowl      | oats       | milk      | oatmeal      |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |
      | glass     | guinness   | champagne | black velvet |

You can implement step definitions for undefined steps with these snippets:

And(~"^serve it to my guests$") { ->
    // Express the Regexp above with the code you wish you had
}
Then(~"^they'll be eating \"([^\"]*)\"$") { String arg1 ->
    // Express the Regexp above with the code you wish you had
}
